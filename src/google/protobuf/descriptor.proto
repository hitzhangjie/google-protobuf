// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// The messages in this file describe the definitions found in .proto files.
// A valid .proto file can be translated directly to a FileDescriptorProto
// without any other information (e.g. without reading its imports).


syntax = "proto2";

// descriptor.proto文件中的messages定义了proto文件中所能见到的所有的定义，一个
// 有效的.proto文件在不提供其他信息（甚至不需要读取它的imports）能够直接被转换
// 成一个FileDescriptorProto对象。

package google.protobuf;
option go_package = "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor";
option java_package = "com.google.protobuf";
option java_outer_classname = "DescriptorProtos";
option csharp_namespace = "Google.Protobuf.Reflection";
option objc_class_prefix = "GPB";

// descriptor.proto必须在速度方面优化，因为在启动过程中基于反射的算法不起作用
option optimize_for = SPEED;

// protoc可以将解析的proto文件中的descriptor添加到FileDescriptorSet并输出到文件
message FileDescriptorSet {
  repeated FileDescriptorProto file = 1;
}

// 下面的message FileDescriptorProto可以用于描述一个完整的proto文件
message FileDescriptorProto {
  optional string name = 1;              // proto文件名，file name，相对于源代码根目录 
  optional string package = 2;           // proto包名，例如 "foo"、"foo.bar"
  repeated string dependency = 3;        // proto文件中import进来的其他proto文件列表
  repeated int32 public_dependency = 10; // 上面public import的proto文件在proto文件列表中的索引

  // Indexes of the weak imported files in the dependency list.
  repeated int32 weak_dependency = 11;   // 上面weak import的proto文件在proto文件列表中的索引
                                         // 不要使用，只用于google内部的迁移

  // proto文件中的所有顶层定义信息
  repeated DescriptorProto message_type = 4;    // 所有的消息(message)类型定义
  repeated EnumDescriptorProto enum_type = 5;   // 所有的枚举(enum)类型定义
  repeated ServiceDescriptorProto service = 6;  // 所有的服务(service)类型定义
  repeated FieldDescriptorProto extension = 7;  // 所有的扩展字段定义

  optional FileOptions options = 8;             // 文件选项

  // 这个字段包括了源代码的相关信息，这里的信息可以给开发工具使用，也仅应该提供给开发工具使用；
  // 可以选择将这个字段中的信息删除，在程序运行期间并不会造成破坏。
  optional SourceCodeInfo source_code_info = 9;

  // The syntax of the proto file.
  // The supported values are "proto2" and "proto3".
  optional string syntax = 12;
}

// 描述消息类型Message
message DescriptorProto {
  optional string name = 1;                     // Message的类型名称

  repeated FieldDescriptorProto field = 2;      // Message中包括的字段列表
  repeated FieldDescriptorProto extension = 6;  // Message中包括的扩展列表

  repeated DescriptorProto nested_type = 3;     // Message中嵌套的Message类型列表
  repeated EnumDescriptorProto enum_type = 4;   // Message中嵌套的枚举类型列表

  message ExtensionRange {
    optional int32 start = 1;
    optional int32 end = 2;
  }
  repeated ExtensionRange extension_range = 5;

  repeated OneofDescriptorProto oneof_decl = 8;

  optional MessageOptions options = 7;

  // Range of reserved tag numbers. Reserved tag numbers may not be used by
  // fields or extension ranges in the same message. Reserved ranges may
  // not overlap.
  message ReservedRange {
    optional int32 start = 1; // Inclusive.
    optional int32 end = 2;   // Exclusive.
  }
  repeated ReservedRange reserved_range = 9;
  // Reserved field names, which may not be used by fields in the same message.
  // A given name may only be reserved once.
  repeated string reserved_name = 10;
}

// 描述一个字段（字段可以是Message中的，也可以是某些扩展字段）
message FieldDescriptorProto {
  enum Type {
    // 0 is reserved for errors.
    // 由于历史方面的原因，这里的枚举值的顺序有点奇怪
    TYPE_DOUBLE         = 1;
    TYPE_FLOAT          = 2;
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
    // negative values are likely.
    TYPE_INT64          = 3;
    TYPE_UINT64         = 4;
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
    // negative values are likely.
    TYPE_INT32          = 5;
    TYPE_FIXED64        = 6;
    TYPE_FIXED32        = 7;
    TYPE_BOOL           = 8;
    TYPE_STRING         = 9;
    // Tag-delimited aggregate.
    // Group type is deprecated and not supported in proto3. However, Proto3
    // implementations should still be able to parse the group wire format and
    // treat group fields as unknown fields.
    TYPE_GROUP          = 10;
    TYPE_MESSAGE        = 11;  // Length-delimited aggregate.

    // New in version 2.
    TYPE_BYTES          = 12;
    TYPE_UINT32         = 13;
    TYPE_ENUM           = 14;
    TYPE_SFIXED32       = 15;
    TYPE_SFIXED64       = 16;
    TYPE_SINT32         = 17;  // Uses ZigZag encoding.
    TYPE_SINT64         = 18;  // Uses ZigZag encoding.
  };

  // 字段修饰符optional、required、repeated
  enum Label {
    // 0 is reserved for errors
    LABEL_OPTIONAL      = 1;
    LABEL_REQUIRED      = 2;
    LABEL_REPEATED      = 3;
  };

  optional string name = 1;             // 字段名称
  optional int32 number = 3;            // 字段tag编号
  optional Label label = 4;             // 字段修饰符

  // 如果type_name已设置，这个字段无须设置；
  // 如果这两个字段都设置了，这里的type字段必须是TYPE_ENUM类型或者TYPE_MESSAGE类型
  optional Type type = 5;

  // 对于TYPE_ENUM或者TYPE_MESSAGE类型，type_name就是type的名字。
  // 如果name以“.”开头那么它是完全保留的。对于C++来说，其作用域规则要求首先搜
  // 索当前Message类型的嵌套类型，然后才是parent namespace中的类型，一直到root
  // namespace。
  optional string type_name = 6;

  // 对于扩展，它就是被扩展的类型的名字，对它的解析与对type_name的解析时一样的
  optional string extendee = 2;

  // 对于数值类型，存储了数值的文本表示形式；
  // 对于布尔类型，存储字符串"true"或"false"；
  // 对于字符串类型，存储原始的文本内容（未转义的）
  // 对于字节，存储了c转义后的值（所有>=128的字节都会被转义）
  // TODO(kenton)，基于base64编码的?
  optional string default_value = 7;

  // If set, gives the index of a oneof in the containing type's oneof_decl
  // list.  This field is a member of that oneof.
  optional int32 oneof_index = 9;

  // JSON name of this field. The value is set by protocol compiler. If the
  // user has set a "json_name" option on this field, that option's value
  // will be used. Otherwise, it's deduced from the field's name by converting
  // it to camelCase.
  optional string json_name = 10;

  optional FieldOptions options = 8;    // 字段选项
}

// Describes a oneof.
message OneofDescriptorProto {
  optional string name = 1;
  optional OneofOptions options = 2;
}

// 描述一个枚举类型enum
message EnumDescriptorProto {
  optional string name = 1;                     // 枚举类型名称
  repeated EnumValueDescriptorProto value = 2;  // 枚举类型中包括的枚举值列表
  optional EnumOptions options = 3;             // 枚举类型选项
}

// 描述一个枚举类型中的一个枚举值
message EnumValueDescriptorProto {
  optional string name = 1;
  optional int32 number = 2;

  optional EnumValueOptions options = 3;
}

// 描述一个rpc service.
message ServiceDescriptorProto {
  optional string name = 1;                     // 服务名称
  repeated MethodDescriptorProto method = 2;    // 服务对应的方法列表
  optional ServiceOptions options = 3;          // 服务选项
}

// 描述一个服务的方法
message MethodDescriptorProto {
  optional string name = 1;                     // 方法名称
  optional string input_type = 2;               // 方法入参类型
  optional string output_type = 3;              // 方法出参类型
  optional MethodOptions options = 4;           // 方法选项

  // Identifies if client streams multiple client messages
  optional bool client_streaming = 5 [default=false];
  // Identifies if server streams multiple server messages
  optional bool server_streaming = 6 [default=false];
}


// ===================================================================
// Options

// 上面的每一个定义基本上都包括了选项option相关的字段，这些选项字段仅仅是一些
// 注解，这些注解会影响代码的生成，使得生成的代码稍有不同，注解也可能包含了操作
// message的代码的一些提示信息、说明信息。
//
// clients可能会定义一些自定义的选项来作为*Options message的extensions，这些
// extensions在parsing阶段可能还无法确定下来，所以parser不能存储他们的值，而是
// 将这些自定义的选项先存储到一个*Options message里面，称之为
// uinterpreted_option。这个字段的名字在所有的*Options message里面都必须保证是
// 相同的。之后在我们构建descriptor的时候，这个时候所有的proto文件也都解析完了、
// 所有的extensions也都知道了，这个时候我们再用这里的uinterpreted_option字段去
// 填充那些extensions。
//
// 用于自定义选项的extensions编号的选择一般遵循下面的方法：
// * 对于只在一个应用程序或者组织内使用的选项，或者用于实验目的的选项，使用字
//   段编号50000~99999范围内的。对于多个选项，用户需要确保不使用相同的编号。
// * 对于可能被多个互不依赖的实体所共同使用的选项，需要给
//   protobuf-global-extension-registry@google.com发邮件来申请预留扩展编号。需
//   要提供工程名称、工程站点，没必要解释为什么需要申请预留某个特定的编号。通
//   常只需要一个扩展编号，可以声明多个选项但是只使用这一个相同的扩展编号。如
//   果申请公共的扩展编号是个刚需，google可能会发布一个web service接口来自动分
//   配选项编号。

message FileOptions {

  // domain names.
  optional string java_package = 1;

  // 指定一个外部类名称，当前proto文件中生成的所有的类将被封装在这个外部类当中
  optional string java_outer_classname = 8;

  // 如果设置为true，java代码生成器将为每个顶层message、enum、service定义生成
  // 单独的java文件，默认为false
  optional bool java_multiple_files = 10 [default=false];

  // 如果设置为true，java代码生成器将未每个message定义生成equals()、hashCode()
  // 方法，默认为false。本来AbstractMessage基类经包括了一个基于反射的equals()、
  // hashCode()方法实现，这里的这个设置项是一个性能方面的优化
  optional bool java_generate_equals_and_hash = 20 [deprecated=true];

  // If set true, then the Java2 code generator will generate code that
  // throws an exception whenever an attempt is made to assign a non-UTF-8
  // byte sequence to a string field.
  // Message reflection will do the same.
  // However, an extension field still accepts non-UTF-8 byte sequences.
  // This option has no effect on when used with the lite runtime.
  optional bool java_string_check_utf8 = 27 [default=false];

  // 优化类型，生成的类可以进行速度优化、代码尺寸优化
  enum OptimizeMode {
    SPEED = 1;        // Generate complete code for parsing, serialization,
                      // etc.
    CODE_SIZE = 2;    // Use ReflectionOps to implement these methods.
    LITE_RUNTIME = 3; // Generate code using MessageLite and the lite runtime.
  }
  optional OptimizeMode optimize_for = 9 [default=SPEED];

  // 设置go代码的包名
  optional string go_package = 11;

  // 是否应该针对每一门语言都生成generice services？generic服务并不特定于任何
  // 的rpc系统，它是由每个语言的注代码生成器来生成的，不借助于额外的插件。
  // generic services是早期protoo2这个版本说支持的唯一一种服务类型。
  //
  // 由于现在推崇使用plugins，plugins可以生成针对特定rpc系统的代码，generic
  // services现在可以看做是被废弃了。因此，以前proto2总的generice services的默
  // 认设置默认为false，早期的依赖于generic services的代码需要显示设置这些选项
  // 为true。
  optional bool cc_generic_services = 16 [default=false];
  optional bool java_generic_services = 17 [default=false];
  optional bool py_generic_services = 18 [default=false];

  // Is this file deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for everything in the file, or it will be completely ignored; in the very
  // least, this is a formalization for deprecating files.
  optional bool deprecated = 23 [default=false];

  // Enables the use of arenas for the proto messages in this file. This applies
  // only to generated classes for C++.
  optional bool cc_enable_arenas = 31 [default=false];


  // Sets the objective c class prefix which is prepended to all objective c
  // generated classes from this .proto. There is no default.
  optional string objc_class_prefix = 36;

  // Namespace for generated classes; defaults to the package.
  optional string csharp_namespace = 37;

  // By default Swift generators will take the proto package and CamelCase it
  // replacing '.' with underscore and use that to prefix the types/symbols
  // defined. When this options is provided, they will use this value instead
  // to prefix the types/symbols defined.
  optional string swift_prefix = 39;

  // Sets the php class prefix which is prepended to all php generated classes
  // from this .proto. Default is empty.
  optional string php_class_prefix = 40;

  // parser将不识别的选项存储在这里的uinterpreted_option
  repeated UninterpretedOption uninterpreted_option = 999;

  // 客户可以定义自定义选项来扩展当前Message
  extensions 1000 to max;

  reserved 38;
}

message MessageOptions {
  // 设为true则使用老的proto1 MessageSet wire format……兼容性目的，没必要使用
  optional bool message_set_wire_format = 1 [default=false];

  // 禁用标准的descriptor()方法的生成，因为如果有个字段名是descriptor的话会生
  // 成一个同名的函数，会冲突。这使得从proto1迁移到后续版本更简单，但是新版本
  // 中还是应该避免使用字段descriptor。
  optional bool no_standard_descriptor_accessor = 2 [default=false];

  // Is this message deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the message, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating messages.
  optional bool deprecated = 3 [default=false];

  // Whether the message is an automatically generated map entry type for the
  // maps field.
  //
  // For maps fields:
  //     map<KeyType, ValueType> map_field = 1;
  // The parsed descriptor looks like:
  //     message MapFieldEntry {
  //         option map_entry = true;
  //         optional KeyType key = 1;
  //         optional ValueType value = 2;
  //     }
  //     repeated MapFieldEntry map_field = 1;
  //
  // Implementations may choose not to generate the map_entry=true message, but
  // use a native map in the target language to hold the keys and values.
  // The reflection APIs in such implementions still need to work as
  // if the field is a repeated message field.
  //
  // NOTE: Do not set the option in .proto files. Always use the maps syntax
  // instead. The option should only be implicitly set by the proto compiler
  // parser.
  optional bool map_entry = 7;

  reserved 8;  // javalite_serializable
  reserved 9;  // javanano_as_lite

  // parser将不识别的选项存储在这个字段里
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户可以定义自定义选项来扩展当前Message
  extensions 1000 to max;
}

message FieldOptions {
  // The ctype option instructs the C++ code generator to use a different
  // representation of the field than it normally would.  See the specific
  // options below.  This option is not yet implemented in the open source
  // release -- sorry, we'll try to include it in a future version!
  optional CType ctype = 1 [default = STRING];
  enum CType {
    // Default mode.
    STRING = 0;

    CORD = 1;

    STRING_PIECE = 2;
  }
  // 开启packed选项之后，对于repeated基本数据类型字段的表示会更加高效。不再针
  // 对repeated字段中的各个元素执行写tag、类型操作，而是将整个数组作为一个固定
  // 长度的blob来存储。
  optional bool packed = 2;

  // The jstype option determines the JavaScript type used for values of the
  // field.  The option is permitted only for 64 bit integral and fixed types
  // (int64, uint64, sint64, fixed64, sfixed64).  By default these types are
  // represented as JavaScript strings.  This avoids loss of precision that can
  // happen when a large value is converted to a floating point JavaScript
  // numbers.  Specifying JS_NUMBER for the jstype causes the generated
  // JavaScript code to use the JavaScript "number" type instead of strings.
  // This option is an enum to permit additional types to be added,
  // e.g. goog.math.Integer.
  optional JSType jstype = 6 [default = JS_NORMAL];
  enum JSType {
    // Use the default type.
    JS_NORMAL = 0;

    // Use JavaScript strings.
    JS_STRING = 1;

    // Use JavaScript numbers.
    JS_NUMBER = 2;
  }

  // 当前字段是否需要lazy parsing？只是建议，lazy为true，protoc不一定lazy parsing
  optional bool lazy = 5 [default=false];

  // 当前字段是否已经被废弃，跟目标平台相关，这个字段可以为生成的accessor方法
  // 生成Deprecated注解，如果目标平台不支持就会忽略这个选项。不管目标平台是否
  // 支持，proto里面要想废弃一个字段加deprecated选项还是非常正确的做法。
  optional bool deprecated = 3 [default=false];

  // google内部迁移使用，因避免使用
  optional bool weak = 10 [default=false];

  // 用户可以定义自定义选项来扩展当前Message
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户自定义选项来扩展message
  extensions 1000 to max;

  reserved 4;  // removed jtype
}

message OneofOptions {
  // The parser stores options it doesn't recognize here. See above.
  repeated UninterpretedOption uninterpreted_option = 999;

  // Clients can define custom options in extensions of this message. See above.
  extensions 1000 to max;
}

message EnumOptions {

  // 不允许将多个不同的tag names映射到一个相同的值
  // - 意思是说不允许多个字段的编号相同
  optional bool allow_alias = 2;

  // Is this enum deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the enum, or it will be completely ignored; in the very least, this
  // is a formalization for deprecating enums.
  optional bool deprecated = 3 [default=false];

  reserved 5;  // javanano_as_lite

  // 用户可以定义自定义选项来扩展当前Message
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户自定义选项来扩展message
  extensions 1000 to max;
}

message EnumValueOptions {
  // Is this enum value deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the enum value, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating enum values.
  optional bool deprecated = 1 [default=false];

  // 用户可以定义自定义选项来扩展当前Message
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户自定义选项来扩展message
  extensions 1000 to max;
}

message ServiceOptions {

  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  //   framework.  We apologize for hoarding these numbers to ourselves, but
  //   we were already using them long before we decided to release Protocol
  //   Buffers.

  // Is this service deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the service, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating services.
  optional bool deprecated = 33 [default=false];

  // 用户可以定义自定义选项来扩展当前Message
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户自定义选项来扩展message
  extensions 1000 to max;
}

message MethodOptions {

  // 注意：字段编号1~32被保留给google内部rpc框架使用，google的解释是，在
  // protobuf被公开给外部使用之前内部就已经大量使用了，且1~32倍使用的很多，也
  // 是不得已的事情，总不能为了开源、推广一个内部组件就把自己的生意砸了吧。

  // Is this method deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the method, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating methods.
  optional bool deprecated = 33 [default=false];

  // Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
  // or neither? HTTP based RPC implementation may choose GET verb for safe
  // methods, and PUT verb for idempotent methods instead of the default POST.
  enum IdempotencyLevel {
    IDEMPOTENCY_UNKNOWN = 0;
    NO_SIDE_EFFECTS     = 1; // implies idempotent
    IDEMPOTENT          = 2; // idempotent, but may have side effects
  }
  optional IdempotencyLevel idempotency_level =
      34 [default=IDEMPOTENCY_UNKNOWN];

  // 用户可以定义自定义选项来扩展当前Message
  repeated UninterpretedOption uninterpreted_option = 999;

  // 用户自定义选项来扩展message
  extensions 1000 to max;
}


// 描述一个parser不认识的option
// - UninterpretedOption只会出现在compiler::Parser类创建的options protos中；
// - 构建Descriptor对象的时候DescriptorPool会解析UninterpretedOptions；
// 因此，descriptor对象中的options protos（通过Descriptor::options()返回，或者
// 通过Descriptor::CopyTo()生成）是不会包括UinterpretedOptions的。
message UninterpretedOption {
  // uinterpreted选项的名字，name中每个元素的name_part字段都表示name中的点分字
  // 符串的一段，如果name_part是一个扩展（通过在字符串两端用括号括起来表示），
  // is_extension字段为true。
  // 例如，{["foo", false], ["bar.baz",true], ["qux",false]}表示"foo.(bar.baz).qux"。
  message NamePart {
    required string name_part = 1;
    required bool is_extension = 2;
  }
  repeated NamePart name = 2;

  // uinterpreted选项的值，会设置下面字段中其中一个的值
  optional string identifier_value = 3;
  optional uint64 positive_int_value = 4;
  optional int64 negative_int_value = 5;
  optional double double_value = 6;
  optional bytes string_value = 7;
  optional string aggregate_value = 8;
}

// ===================================================================
// Optional source code info

// FileDescriptorProto是从之前的source file中生成的（source file指的是proto文
// 件），这里的SourceCodeInfo指的是proto中的“源代码”信息。
message SourceCodeInfo {
  // Location用于识别proto文件中的源代码片段，往往对应着一个特定的定义。这些
  // Location信息对于IDE、代码索引工具、文档生成工具等是非常重要的。
  //
  // 下面说明一下Location的概念和作用，以下面这个message为例：
  //   message Foo {
  //     optional string foo = 1;
  //   }
  // 我们先只看上面这个message中的字段定义：
  //   optional string foo = 1;
  //   ^       ^^     ^^  ^  ^^^
  //   a       bc     de  f  ghi
  // 我们可以得到下面这几个Location：
  //   span   path               represents
  //   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
  //   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
  //   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
  //   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
  //   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
  //
  // 每个proto文件解析之后用一个FileDescriptorProto来表示，所以Lcoation路径位
  // 置从FileDescriptorProto开始。
  // - 因为message Foo是一个message，proto中所有顶层message类型定义都在
  //   FileDescriptorProto中message_type字段存储，这个字段的tag是4，所以Location为[4]；
  // - 又因为message_type是repeated DescriptorProto类型，因为当前proto示例中
  //   Foo为第一个message，所以其在message_type列表中的索引值为0，所以Location为[4,0]；
  // - 因为我们现在看的“源代码”是“optional string foo = 1;”，我们需要定位到
  //   message中的字段位置，message Foo中的所有字段都在DescriptorProto中的field字
  //   段中记录，这个字段的tag=2，所以Location变为[4,0,2]；
  // - 又因为这个DescriptorProto中的field为repeated FieldDescriptorProto field，
  //   因为这个message中只有一个字段foo，所以foo在field列表中的索引值为0，Location变为[4,0,2,0];
  // 上面解释了定位到完整的“optional string foo = 1”定义这个field的Location变
  // 化过程，下面再说一下label、type、name、number的Location如何进一步确定。
  // FieldDescriptorProto中label的tag位4，type的tag为5，name的tag为1，number的
  // tag为3，Location对应的追加索引4、5、1、3。gg!
  //
  // proto文件中的源代码信息就是由一系列的Location来寻址的。
  repeated Location location = 1;

  message Location {
    // 前面已经描述了Location的确定过程，一个Location如[4,0,2,0]其中的数字要么
    // 是字段的tag编号要么是repeated列表中的索引值，这里的数字构成的数组保存在
    // path中。
    repeated int32 path = 1 [packed=true];

    // 该字段span总是包括3个或者4个元素，依次表示startline、startcolumn、endline、endcolumn
    repeated int32 span = 2 [packed=true];

    // 如果这个SourceCodeInfo代表一个完整的声明的话，可能在这个声明的前面或者
    // 后面可能有一些attached的注释。
    //
    // 连续的多个行注释看做是一个单独的注释。
    //
    // 这个字段只记录了注释内容，不包括注释内容开头的注释符号//。对于块注释，
    // 注释前面的空白字符、*这几种符号也会被清理掉。但是会包括换行符。
    //
    // Examples:
    //
    //   optional int32 foo = 1;  // Comment attached to foo.
    //   // Comment attached to bar.
    //   optional int32 bar = 2;
    //
    //   optional string baz = 3;
    //   // Comment attached to baz.
    //   // Another line attached to baz.
    //
    //   // Comment attached to qux.
    //   //
    //   // Another line attached to qux.
    //   optional double qux = 4;
    //
    //   optional string corge = 5;
    //   /* Block comment attached
    //    * to corge.  Leading asterisks
    //    * will be removed. */
    //   /* Block comment attached to
    //    * grault. */
    //   optional int32 grault = 6;

    // Location前面的注释信息
    optional string leading_comments = 3;

    // Location后面的注释信息
    optional string trailing_comments = 4;

    repeated string leading_detached_comments = 6;
  }
}

// Describes the relationship between generated code and its original source
// file. A GeneratedCodeInfo message is associated with only one generated
// source file, but may contain references to different source .proto files.
message GeneratedCodeInfo {
  // An Annotation connects some span of text in generated code to an element
  // of its generating .proto file.
  repeated Annotation annotation = 1;
  message Annotation {
    // Identifies the element in the original source .proto file. This field
    // is formatted the same as SourceCodeInfo.Location.path.
    repeated int32 path = 1 [packed=true];

    // Identifies the filesystem path to the original source .proto.
    optional string source_file = 2;

    // Identifies the starting offset in bytes in the generated code
    // that relates to the identified object.
    optional int32 begin = 3;

    // Identifies the ending offset in bytes in the generated code that
    // relates to the identified offset. The end offset should be one past
    // the last relevant byte (so the length of the text = end - begin).
    optional int32 end = 4;
  }
}
