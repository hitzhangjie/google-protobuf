// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//
// WARNING:  The plugin interface is currently EXPERIMENTAL and is subject to
//   change.
//
// protoc (aka the Protocol Compiler) can be extended via plugins.  A plugin is
// just a program that reads a CodeGeneratorRequest from stdin and writes a
// CodeGeneratorResponse to stdout.
//
// Plugins written using C++ can use google/protobuf/compiler/plugin.h instead
// of dealing with the raw protocol defined here.
//
// A plugin executable needs only to be placed somewhere in the path.  The
// plugin should be named "protoc-gen-$NAME", and will then be used when the
// flag "--${NAME}_out" is passed to protoc.

syntax = "proto2";
package google.protobuf.compiler;
option java_package = "com.google.protobuf.compiler";
option java_outer_classname = "PluginProtos";

option go_package = "github.com/golang/protobuf/protoc-gen-go/plugin;plugin_go";

import "google/protobuf/descriptor.proto";

// The version number of protocol compiler.
message Version {
  optional int32 major = 1;
  optional int32 minor = 2;
  optional int32 patch = 3;
  // A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
  // be empty for mainline stable releases.
  optional string suffix = 4;
}

// 发送给插件的代码生成请求
// An encoded CodeGeneratorRequest is written to the plugin's stdin.
message CodeGeneratorRequest {
  // The .proto files that were explicitly listed on the command-line.  The
  // code generator should generate code only for these files.  Each file's
  // descriptor will be included in proto_file, below.
  repeated string file_to_generate = 1;

  // The generator parameter passed on the command-line.
  //传递给插件代码生成器的参数
  optional string parameter = 2;

  // FileDescriptorProtos for all files in files_to_generate and everything
  // they import.  The files will appear in topological order, so each file
  // appears before any file that imports it.
  //
  // protoc guarantees that all proto_files will be written after
  // the fields above, even though this is not technically guaranteed by the
  // protobuf wire format.  This theoretically could allow a plugin to stream
  // in the FileDescriptorProtos and handle them one by one rather than read
  // the entire set into memory at once.  However, as of this writing, this
  // is not similarly optimized on protoc's end -- it will store all fields in
  // memory at once before sending them to the plugin.

  // 每一个正确解析的proto文件都用一个FileDescriptorProto来表示；
  // 这里的FileDescriptorProto与FileDescriptor其实是对应的，在请求插件进行代码
  // 生成的时候直接就有这样的代码FileDescriptor::CopyTo(FileDescriptorProto&)
  // 的用法。而在descriptor.h和descriptor.proto中查看二者的描述时，其注释清清
  // 楚楚地写着都是描述的一个完整的proto文件。
  repeated FileDescriptorProto proto_file = 15;

  // The version number of protocol compiler.
  optional Version compiler_version = 3;
}

// 插件返回的代码生成响应
// The plugin writes an encoded CodeGeneratorResponse to stdout.
message CodeGeneratorResponse {
  // Error message.  If non-empty, code generation failed.  The plugin process
  // should exit with status code zero even if it reports an error in this way.
  //
  // This should be used to indicate errors in .proto files which prevent the
  // code generator from generating correct code.  Errors which indicate a
  // problem in protoc itself -- such as the input CodeGeneratorRequest being
  // unparseable -- should be reported by writing a message to stderr and
  // exiting with a non-zero status code.

  // 错误信息
  optional string error = 1;

  // Represents a single generated file.
  // 生成的源代码文件消息类型，注意这里是一个内部类型
  message File {
    // 待生成的源代码文件名（相对于输出目录），文件名中不能包括.或者..，路径是
    // 相对输出目录的路径，不能用绝对路径，另分隔符必须用/。
    // 如果name没有指定，那么输出的内容将追加到前一个输出的源代码文件中，这种
    // 方式使得代码生成器能够将一个大文件的生成分多次写入来完成，不用一次性将很
    // 大数据量的数据放在内存中。这里需要指出的是，protoc中并没有针对这种情况
    //  进行特殊的优化，它等待读取完整的CodeGeneratorResponse再写出到磁盘。
    optional string name = 1;

    // 如果insertion_point不空的话，name字段也不能为空，并且假定name字段指定的
    // 文件已经存在了。这里的内容将被插入到name指定的文件中的特定插入点（注解）的
    // 上一行。这有助于扩展代码生成器输出的内容。在一次protoc调用中，可能会同
    // 时指定多个protoc插件，前面的插件可能会在输出的内容中指定插入点，后面的
    // 插件可能会在这些指定的插入点的位置继续扩展代码内容。
    // 例如，前面的一个插件在输出的代码内容中增加了这样一行注解：
    //   @@protoc_insertion_point(NAME)
    // 这样就定义了一个插入点，插入点前面、后面可以包含任意的文本内容，即使在
    // 注释里面也是可以的。这里的插入点定义中的NAME应该可以唯一标识一个插入点
    // 才可以，类似于标识符，以供其他的插件使用，插件插入代码的时候将从插入点
    // 的上一行开始自行插入。如果包含多个插入点的话，插入点的内容将被插件依次
    // 扩展。
    //
    // 一开始创建这个源代码文件的代码生成器或者插件与后面的继续扩展源代码插入
    // 点位置内容的代码生成器或者插件，必须在protoc的同一次调用中，代码生成器
    // 或者插件按照protoc命令行调用过程中指定的顺序依次调用。
    optional string insertion_point = 2;

    // 待写入到源代码中的内容
    optional string content = 15;
  }
  // 一次要处理的 proto文件可能有多个，所以插件处理后这里的file是一个list
  repeated File file = 15;
}
